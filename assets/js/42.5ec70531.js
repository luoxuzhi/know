(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{464:function(n,e,t){"use strict";t.r(e);var s=t(53),r=Object(s.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h3",{attrs:{id:"_2-容器操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-容器操作"}},[this._v("#")]),this._v(" 2.容器操作")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("1. 运行容器\n\ndocker run 镜像id|镜像名称\ndocker run -d -p 宿主机端口:容器端口 --name 容器名称 镜像id|镜像名称\n-d 后端运行容器\n-p 为了映射当前linux端口和容器端口\n--name 定制容器的名称\n\n2. 查看正在运行的容器\n\ndocker ps [-qa]\n-a 查看所有的容器，包括没有运行的\n-q 只查看容器的标识\n\n3. 查看容器的日志\n\ndocker logs -f 容器id\n-f可以滚动查看日志的最后几行\n\n4. 进入容器的内部\n\ndocker exec -it 容器id bash\ndocker exec -it 容器id sh\n\n5.删除容器，删除之前，首先要停止容器\n\n// 停止指定的容器\ndocker stop 容器id\n// 停止全部的容器\ndocker stop $(docker ps -qa)\ndocker rm 容器id\ndocker rm $(docker ps -qa)\n\n6.启动容器\n\ndocker start 容器id|镜像名称\n\n7. 修改容器名称\n\ndocker commit 容器id newname\n\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);