(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{537:function(t,e,a){"use strict";a.r(e);var r=a(53),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_5-smil-动画简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-smil-动画简介"}},[t._v("#")]),t._v(" 5. SMIL 动画简介")]),t._v(" "),a("p",[t._v("所谓 SMIL 动画指在 SVG 集成了 Synchronized Multimedia Integration Language (SMIL) 这种动画标准，该语言被 SVG 原生支持，主要是使用标签来描述动画。")]),t._v(" "),a("p",[t._v("SMIL 允许你：")]),t._v(" "),a("p",[t._v("1、变动一个元素的数字属性（x、y……）")]),t._v(" "),a("p",[t._v("2、改变元素的变形属性（translation 或 rotation）")]),t._v(" "),a("p",[t._v("3、改变元素的颜色属性")]),t._v(" "),a("p",[t._v("4、跟随路径运动")]),t._v(" "),a("p",[t._v("5、控制形状之间的变化")]),t._v(" "),a("p",[t._v("通过添加 SVG 动画元素，比如 animate 到 SVG 素内部来实现动画，就能实现让元素动起来。下面来看几个实例来演示四种不同的动画方式。")]),t._v(" "),a("h3",{attrs:{id:"smil-动画使用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#smil-动画使用方法"}},[t._v("#")]),t._v(" SMIL 动画使用方法")]),t._v(" "),a("p",[t._v("先定义一个 SVG：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<svg width="500px" height="500px" viewBox="0 0 500 500">\n</svg>\n\n')])])]),a("p",[t._v("然后在里面定义一个矩形，并且定义好填充颜色等属性：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<svg width="500px" height="500px" viewBox="0 0 500 500">\n    <rect x="0" y="0" width="100" height="100" fill="#feac5e">\n    </rect>\n</svg>\n\n')])])]),a("p",[t._v("如果要使这个矩形动起来，我们需要在矩形这个元素里使用 "),a("animate"),t._v(" 这个元素来使它动起来。")]),t._v(" "),a("p",[t._v("在 "),a("animate"),t._v("，我们需要添加一些属性，首先使用 "),a("strong",[t._v("attributeName")]),t._v(" 来定义我们需要元素发生变化的属性，在这个实例中，我们需要它左右移动，即横坐标 X，就可以把用 "),a("strong",[t._v("attributeName")]),t._v(" 设置为 "),a("strong",[t._v("x")]),t._v("。这样就可以使元素在 X 轴上运动。")]),t._v(" "),a("p",[t._v("然后定义 "),a("strong",[t._v("from")]),t._v(" 的值和 "),a("strong",[t._v("to")]),t._v(" 的值，指定元素要运动的距离；使用 "),a("strong",[t._v("dur")]),t._v(" 来定义运动的时长；使用 "),a("strong",[t._v("repeatCount")]),t._v(" 去定义动画运行的次数，"),a("strong",[t._v("repeatCount")]),t._v(" 值为 "),a("strong",[t._v("indefinite")]),t._v(" 表示无限循环这个动画。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<svg width="500px" height="500px" viewBox="0 0 500 500">\n\n    <rect x="0" y="0" width="100" height="100" fill="#feac5e">\n        <animate attributeName="x" from="0" to="500" dur="2s" repeatCount="indefinite" />\n    </rect>\n\n</svg>\n\n')])])]),a("p",[t._v("一个简单 SVG SMIL 动画就完成了。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/12/2/1676eed7f7648ede?w=1024&h=328&f=gif&s=109612",alt:"图片"}})]),t._v(" "),a("p",[a("a",{attrs:{href:"https://codepen.io/janily/pen/zmrQKE",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码演示地址"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("当然，我们可以在改变它位置的时候，同时改变其它的属性。比如，我们多定义 2 个 "),a("animate"),t._v(" 来改变它的宽度和颜色：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<animate attributeName="x" from="0" to="500" dur="2s" repeatCount="indefinite" />\n<animate attributeName="width" to="500" dur="2s" repeatCount="indefinite" />\n<animate attributeName="fill" to="black" dur="2s" repeatCount="indefinite" />\n\n')])])]),a("p",[t._v("效果如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/12/2/1676eed7f7e06218?w=1024&h=238&f=gif&s=56881",alt:"图片"}})]),t._v(" "),a("p",[a("a",{attrs:{href:"https://codepen.io/janily/pen/vVLwXv",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码演示地址"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("我们还可以使用 "),a("animateTransform"),t._v(" 来代替 <animate /&，可以操作元素 "),a("strong",[t._v("transform")]),t._v(" 相关的属性，使用 type 来指定要操作 "),a("strong",[t._v("transform")]),t._v(" 的属性，还可以使用 begin 来指定动画从哪开始。比如，下面这个实例我们要使元素旋转起来，那我们就要把 "),a("strong",[t._v("type")]),t._v(" 的值指定为 "),a("strong",[t._v("rotate")]),t._v("，"),a("strong",[t._v("rotate")]),t._v(" 属性的值包含三个坐标的值，分别为角度，横坐标的值即 x 和和纵坐标的值即 y。代码如下所示：")],1),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<svg width="500px" height="500px" viewBox="0 0 500 500">\n    <rect x="250" y="250" width="50" height="50" fill="#4bc0c8">\n        <animateTransform attributeName="transform" type="rotate" begin="0s" dur="10s" from="0 200 200" to="360 400 400" repeatCount="indefinite" />\n    </rect>\n</svg>\n\n')])])]),a("p",[t._v("在上面的代码中我们可以看到 "),a("strong",[t._v("from")]),t._v(" 的值为 "),a("strong",[t._v("0 200 200")]),t._v("，to 的值为 "),a("strong",[t._v("360 400 400")]),t._v("，即表示元素在横坐标和纵坐标分别为 200 的位置旋转 360 度到横坐标和纵坐标分别为 400 的位置。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/12/2/1676eed7f94e8115?w=964&h=424&f=gif&s=239842",alt:"图片"}})]),t._v(" "),a("p",[a("a",{attrs:{href:"https://codepen.io/janily/pen/XxNejW",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码演示地址"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("通过上面一个简单的动画效果，我们对 SMIL 动画也有了一个初步的认识，下面再通过一个稍微复杂点效果，来进一步加深对 SMIL 动画的认识。")]),t._v(" "),a("h2",{attrs:{id:"smil-动画实战"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#smil-动画实战"}},[t._v("#")]),t._v(" SMIL 动画实战")]),t._v(" "),a("p",[t._v("接下来我们一起来使用 SMIL 来实现下面这个简单的加载动画效果：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/12/2/1676eed7f9267bdb?w=1024&h=726&f=gif&s=165661",alt:"图片"}})]),t._v(" "),a("p",[t._v("开始之前先来分析下这个动画效果的构成。")]),t._v(" "),a("ul",[a("li",[t._v("首先是旋转动画，这个可以用 transform 中的 rotate 属性来实现。")]),t._v(" "),a("li",[t._v("然后是这个圆圈边框的颜色变化，这个可以通过改变 stroke 的颜色的值来实现。")]),t._v(" "),a("li",[t._v("最后，是边框的长短变化，这个可以通过改变 stroke 的 stoke-dashoffset 来实现。")])]),t._v(" "),a("p",[t._v("先来准备基本的 HTML 结构：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<svg width="65px" height="65px" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">\n  <g>   \n    <circle fill="none" stroke-width="6" stroke-linecap="round" stroke="#000" cx="33" cy="33" r="30" >    </circle>\n   </g>\n</svg>\n\n')])])]),a("p",[t._v("从代码中可以看到，我们使用 g 标签把圆圈包裹起来，这样我们就可以嵌套动画来，先把 g 元素旋转起来，代码如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<svg width="65px" height="65px" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">\n  <g>\n    <animateTransform attributeName="transform" type="rotate" values="0 33 33;270 33 33" begin="0s" dur="1.4s" fill="freeze" repeatCount="indefinite"/>\n    <circle fill="none" stroke-width="6" stroke-linecap="round" stroke="#000" cx="33" cy="33" r="30" >    </circle>\n   </g>\n</svg>\n\n\n')])])]),a("p",[t._v("在上面的代码中有个新的参数 "),a("strong",[t._v("values")]),t._v("，"),a("strong",[t._v("values")]),t._v(" 可以是一个值或多值。多值时候有动画效果。当 values 值设置并能识别时候，from, to 的值都会被忽略。")]),t._v(" "),a("h3",{attrs:{id:"values-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#values-属性"}},[t._v("#")]),t._v(" values 属性")]),t._v(" "),a("p",[t._v("那 values 属性是干什么的呢？在实际开发动画的时候，不可能就是单纯的从 a 位置到 b 位置。有时候，需要去 c 位置过渡下。此时，实际上有 3 个动画关键点。而 from, to/by 只能驾驭两个，此时就是 values 大显身手的时候了，它可以设置多个值。")]),t._v(" "),a("p",[t._v("比如我们可以把文章最开始的动画修改一下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<svg width="500px" height="500px" viewBox="0 0 500 500">\n\n    <rect x="0" y="0" width="100" height="100" fill="#feac5e">\n        <animate attributeName="x" values="160;40;160\n" dur="2s" repeatCount="indefinite" />\n    </rect>\n</svg>\n\n')])])]),a("p",[t._v("在上面代码中，values 设置了 3 个值，这样当矩形运行到 160 的时候，会返回到 40 的位置，然后再运动到 160 的位置，这样就形成来一个来回运动的动画效果。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/12/2/1676eed7f9327757?w=748&h=370&f=gif&s=87286",alt:"图片"}})]),t._v(" "),a("p",[a("a",{attrs:{href:"https://codepen.io/janily/pen/rqWGWB",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码演示地址"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"加载动画实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加载动画实现"}},[t._v("#")]),t._v(" 加载动画实现")]),t._v(" "),a("p",[t._v('具体到这个旋转动画中，我们使用 animateTransform 标签来实现旋转动画，values 的值为 values="0 33 33;270 33 33" 表示元素在横坐标和纵坐标分别为 33 的这个位置保持不动，从 0 到 270 这个角度不停的旋转，因为 '),a("strong",[t._v("repeatCount")]),t._v(" 的值为 "),a("strong",[t._v("indefinite")]),t._v("。")]),t._v(" "),a("p",[t._v("OK，圆圈旋转动画完成后，接下来是边框颜色的变化，这个圆圈在旋转的过程中，有 5 中颜色的变化，这个时候 values 就派上用场了：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<svg width="65px" height="65px" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">\n  <g>\n    <animateTransform attributeName="transform" type="rotate" values="0 33 33;270 33 33" begin="0s" dur="1.4s" fill="freeze" repeatCount="indefinite"/>\n    <circle fill="none" stroke-width="6" stroke-linecap="round" cx="33" cy="33" r="30" stroke-dasharray="187" stroke-dashoffset="610">\n      <animate attributeName="stroke" values="#4285F4;#DE3E35;#F7C223;#1B9A59;#4285F4" begin="0s" dur="5.6s" fill="freeze" repeatCount="indefinite"/>\n    </circle>\n   </g>\n</svg>\n\n')])])]),a("p",[t._v("颜色的变化我们使用 "),a("strong",[t._v("attributeName")]),t._v(" 的值指定为 "),a("strong",[t._v("stroke")]),t._v("，然后使用 "),a("strong",[t._v("values")]),t._v(" 指定 5 个颜色的值，这样元素的 stroke 也就是边框的颜色会在这 5 中颜色来回不停的变化。")]),t._v(" "),a("p",[t._v("在上面的代码中，还设置了圆圈的 "),a("strong",[t._v("stroke-dasharray")]),t._v(" 和 "),a("strong",[t._v("stroke-dashoffset")]),t._v(" 两个属性的值，在后面的用来实现边框长短变化动画用的。")]),t._v(" "),a("p",[t._v("代码中的 "),a("strong",[t._v("fill")]),t._v(" 表示动画间隙的填充方式。支持参数有： "),a("strong",[t._v("freeze")]),t._v(" | "),a("strong",[t._v("remove")]),t._v("。其中 remove 是默认值，表示动画结束直接回到开始的地方。freeze “冻结” 表示动画结束后像是被冻住了，元素保持了动画结束之后的状态。")]),t._v(" "),a("p",[t._v("接下来就是实现边框长短变化的动画，这里的值没有固定的，需要我们不停的调试，最后选择一个最舒服的值就可以了，完整代码如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<svg width="65px" height="65px" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">\n  <g>\n    <animateTransform attributeName="transform" type="rotate" values="0 33 33;270 33 33" begin="0s" dur="1.4s" fill="freeze" repeatCount="indefinite"/>\n    <circle fill="none" stroke-width="6" stroke-linecap="round" cx="33" cy="33" r="30" stroke-dasharray="187" stroke-dashoffset="610">\n      <animate attributeName="stroke" values="#4285F4;#DE3E35;#F7C223;#1B9A59;#4285F4" begin="0s" dur="5.6s" fill="freeze" repeatCount="indefinite"/>\n      <animateTransform attributeName="transform" type="rotate" values="0 33 33;135 33 33;450 33 33" begin="0s" dur="1.4s" fill="freeze" repeatCount="indefinite"/>\n      <animate attributeName="stroke-dashoffset" values="187;46.75;187" begin="0s" dur="1.4s" fill="freeze" repeatCount="indefinite"/>\n    </circle>\n   </g>\n</svg>\n\n')])])]),a("p",[t._v("一个使用 SMIL 的加载动画就完成了。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/12/2/1676eed7f9267bdb?w=1024&h=726&f=gif&s=165661",alt:"图片"}})]),t._v(" "),a("p",[a("a",{attrs:{href:"https://codepen.io/janily/pen/GYNMBG",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码演示地址"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("到这里，SVG 基础的动画实现方式就讲完了，那如果要制作更加强大的动画效果，要更加灵活的控制 SVG，就不得不借助于 JavaScript 了。")]),t._v(" "),a("p",[t._v("下一章节我们就开始来讲解使用 JavaScript 来高效的开发 SVG 动画。")]),t._v(" "),a("p",[t._v("关于 SMIL 详细的介绍可以去这个"),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/SVG/SVG_animation_with_SMIL",target:"_blank",rel:"noopener noreferrer"}},[t._v("文档"),a("OutboundLink")],1),t._v("看看。")])])}),[],!1,null,null,null);e.default=s.exports}}]);