(window.webpackJsonp=window.webpackJsonp||[]).push([[137],{558:function(e,t,o){"use strict";o.r(t);var v=o(53),n=Object(v.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h2",{attrs:{id:"_1-vue3"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1-vue3"}},[e._v("#")]),e._v(" 1. Vue3")]),e._v(" "),o("h3",{attrs:{id:"_1-vue3-的新特性"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1-vue3-的新特性"}},[e._v("#")]),e._v(" 1. Vue3 的新特性")]),e._v(" "),o("p",[e._v("a. setup() 函数是 vue3 中，专门为组件提供的新属性。它为我们使用 vue3 的 Composition API 新特性提供了统一的入口,setup 函数会在 "),o("code",[e._v("beforeCreate")]),e._v(" 之前执行。")]),e._v(" "),o("div",{staticClass:"language-js extra-class"},[o("pre",{pre:!0,attrs:{class:"language-js"}},[o("code",[o("span",{pre:!0,attrs:{class:"token function"}},[e._v("setup")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),o("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("props"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" context")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\ncontext"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("attrs\ncontext"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("slots\ncontext"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("parent\ncontext"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("root\ncontext"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("emit\ncontext"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("refs\n"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n")])])]),o("p",[e._v("b.响应式由 Object.definePropety 改为 Proxy")]),e._v(" "),o("p",[e._v("c.新的 API,"),o("code",[e._v("reactive、ref、isRef、toRefs、computed、watch")])]),e._v(" "),o("p",[e._v("d.生命周期只能用在"),o("code",[e._v("setup")]),e._v("函数中")]),e._v(" "),o("p",[e._v("e.新的标签"),o("code",[e._v("Fragment/Suspense/Teleport")])]),e._v(" "),o("h3",{attrs:{id:"_2-vue3-中-ref-reactive-torefs-的区别及作用。-具体见-composition-api"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_2-vue3-中-ref-reactive-torefs-的区别及作用。-具体见-composition-api"}},[e._v("#")]),e._v(" 2. Vue3 中 ref reactive toRefs 的区别及作用。 "),o("a",{attrs:{href:"https://composition-api.vuejs.org/api.html#customref",target:"_blank",rel:"noopener noreferrer"}},[e._v("具体见 composition-api"),o("OutboundLink")],1)]),e._v(" "),o("p",[e._v("Vue3 的"),o("code",[e._v("computed")]),e._v("返回为为"),o("code",[e._v("ref")]),e._v("，是为了防止基本类型的数据丢失响应式。")]),e._v(" "),o("p",[e._v("JavaScript 中区别声明基础类型变量与对象变量时一样区别使用 "),o("code",[e._v("ref")]),e._v(" 和 "),o("code",[e._v("reactive")]),e._v("，使用 "),o("code",[e._v("reactive")]),e._v(" 的问题是，使用组合函数时必须始终保持对这个所返回对象的引用以保持响应性，这个对象不能被解构或展开。"),o("code",[e._v("toRefs")]),e._v(" API 用来提供解决此约束的办法，它将响应式对象的每个 "),o("code",[e._v("property")]),e._v(" 都转成了相应的 "),o("code",[e._v("ref")]),e._v("。")]),e._v(" "),o("p",[o("a",{attrs:{href:"https://vue-next-template-explorer.netlify.app/#%7B%22src%22%3A%22%3Cdiv%3EHello%20World!%3C%2Fdiv%3E%22%2C%22options%22%3A%7B%22mode%22%3A%22module%22%2C%22prefixIdentifiers%22%3Afalse%2C%22optimizeImports%22%3Afalse%2C%22hoistStatic%22%3Afalse%2C%22cacheHandlers%22%3Afalse%2C%22scopeId%22%3Anull%2C%22ssrCssVars%22%3A%22%7B%20color%20%7D%22%2C%22bindingMetadata%22%3A%7B%22TestComponent%22%3A%22setup%22%2C%22foo%22%3A%22setup%22%2C%22bar%22%3A%22props%22%7D%2C%22optimizeBindings%22%3Afalse%7D%7D",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue-next-template-explorer"),o("OutboundLink")],1)]),e._v(" "),o("h3",{attrs:{id:"_3-vue3-的初始化过程"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_3-vue3-的初始化过程"}},[e._v("#")]),e._v(" 3. Vue3 的初始化过程")]),e._v(" "),o("p",[o("a",{attrs:{href:"https://www.yuque.com/woniuppp/vue3",target:"_blank",rel:"noopener noreferrer"}},[e._v("更多资料"),o("OutboundLink")],1)]),e._v(" "),o("img",{attrs:{src:e.$withBase("/assets/vue3-init.jpg")}}),e._v(" "),o("div",{staticClass:"language-js extra-class"},[o("pre",{pre:!0,attrs:{class:"language-js"}},[o("code",[o("span",{pre:!0,attrs:{class:"token function"}},[e._v("createApp")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("App"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),o("span",{pre:!0,attrs:{class:"token function"}},[e._v("mount")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("rootNode"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),o("p",[o("code",[e._v("Vue3")]),e._v("初始化的过程从调用 mount 方法开始，")]),e._v(" "),o("ol",[o("li",[e._v("调用 "),o("code",[e._v("mount")]),e._v(" 方法后，基于根组件、根节点创建 "),o("code",[e._v("vnode")]),e._v("，"),o("code",[e._v("vnode")]),e._v(" 创建完成后开始 "),o("code",[e._v("render")]),e._v(" 渲染，"),o("code",[e._v("render")]),e._v(" 实际调用的是 "),o("code",[e._v("patch")]),e._v(" 方法")]),e._v(" "),o("li",[e._v("在 "),o("code",[e._v("patch")]),e._v(" 方法中，根据 "),o("code",[e._v("shapeFlag")]),e._v(" 来判断是初始化 "),o("code",[e._v("component")]),e._v(" 还是 "),o("code",[e._v("element")])]),e._v(" "),o("li",[e._v("先是初始化 "),o("code",[e._v("component")]),e._v("，初始化 "),o("code",[e._v("component")]),e._v(" 分为三步，一是通过 "),o("code",[e._v("createComponentInstance")]),e._v(" 创建组件实例，二是调用 "),o("code",[e._v("setupComponent")]),e._v(" 来配置组件，这里主要实现 "),o("code",[e._v("initProps/initSlots/配置 setup/配置 render 方法")]),e._v("，三是 "),o("code",[e._v("setupRenderEffect")]),e._v("，这里调用上一步的 "),o("code",[e._v("render")]),e._v(" 方法来生成子组件的 "),o("code",[e._v("vnode")]),e._v("，触发自身的 "),o("code",[e._v("beforeMount")]),e._v("，递归调用 "),o("code",[e._v("patch")]),e._v(" 方法来初始化子元素，最后触发 "),o("code",[e._v("mounted")])]),e._v(" "),o("li",[e._v("初始化 "),o("code",[e._v("component")]),e._v(" 最后一步的 "),o("code",[e._v("setupRenderEffect")]),e._v(" 中递归调用 "),o("code",[e._v("patch")]),e._v("处理子元素，"),o("code",[e._v("patch")]),e._v(" 的子元素有 "),o("code",[e._v("component")]),e._v("和 "),o("code",[e._v("element")]),e._v(" 类型。如果是 "),o("code",[e._v("component")]),e._v(" 类型，会重复上面第三步进行初始化，这也是生命周期"),o("code",[e._v("父 beforeMount->子 beforeMount->子 mounted->父 mounted")]),e._v(" 的原因。如果子元素是 "),o("code",[e._v("element")]),e._v(" 类型，会进行以下处理：调用 "),o("code",[e._v("createElement")]),e._v(" 方法来创建真实 element，处理 "),o("code",[e._v("children")]),e._v(" 节点，调用 "),o("code",[e._v("hostPatchProp")]),e._v(" 处理标签上的属性，触发 "),o("code",[e._v("beforeMount")]),e._v(" 钩子，调用 "),o("code",[e._v("insert")]),e._v(" 插入父节点，最后触发 "),o("code",[e._v("mounted")]),e._v("。")])]),e._v(" "),o("h3",{attrs:{id:"_4-vue2-的-object-defineproperty-和-vue3-的-proxy-对比"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_4-vue2-的-object-defineproperty-和-vue3-的-proxy-对比"}},[e._v("#")]),e._v(" 4. Vue2 的 Object.defineProperty 和 Vue3 的 Proxy 对比")]),e._v(" "),o("p",[o("code",[e._v("Object.defineProperty")]),e._v("的缺点：")]),e._v(" "),o("ul",[o("li",[o("p",[e._v("无法检测到对象属性的新增或删除")]),e._v(" "),o("p",[e._v("由于 js 的动态性，可以为对象追加新的属性或者删除其中某个属性，这点对经过"),o("code",[e._v("Object.defineProperty")]),e._v(" 方法建立的响应式对象来说，只能追踪对象已有数据是否被修改，无法追踪新增属性和删除属性，这就需要额外的代码处理。")])]),e._v(" "),o("li",[o("p",[e._v("数组变化监听：vue2.x 是通过代理数组原型，包装了一层数组的变异方法："),o("code",[e._v("'pop','shift','unshift','sort','reverse','splice', 'push'")])])]),e._v(" "),o("li",[o("p",[e._v("get set 拦截器不能直接操作 target 对象")])])]),e._v(" "),o("p",[e._v("Vue3 的 Proxy 代理是针对整个对象，不是针对对象属性做拦截，替换了原先遍历对象使用"),o("code",[e._v("Object.defineProperty")]),e._v("方法给属性添加 set,get 访问器的笨拙做法，优化性能")]),e._v(" "),o("p",[e._v("劣势：")]),e._v(" "),o("ul",[o("li",[e._v("性能比 promise 还差")]),e._v(" "),o("li",[e._v("兼容性不太乐观 ,无法完全 polyfill")])])])}),[],!1,null,null,null);t.default=n.exports}}]);