(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{434:function(t,a,_){"use strict";_.r(a);var v=_(53),e=Object(v.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"_4-number、math、string"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-number、math、string"}},[t._v("#")]),t._v(" 4.Number、Math、String")]),t._v(" "),_("p",[t._v("1.Number对象的属性")]),t._v(" "),_("p",[_("code",[t._v("Number.POSITIVE_INFINITY")]),t._v("：正的无限，指向Infinity。")]),t._v(" "),_("p",[_("code",[t._v("Number.NEGATIVE_INFINITY")]),t._v("：负的无限，指向-Infinity。")]),t._v(" "),_("p",[_("code",[t._v("Number.NaN")]),t._v("：表示非数值，指向NaN。")]),t._v(" "),_("p",[_("code",[t._v("Number.MAX_VALUE")]),t._v("：表示最大的正数，相应的，最小的负数为-Number.MAX_VALUE。")]),t._v(" "),_("p",[_("code",[t._v("Number.MIN_VALUE")]),t._v("：表示最小的正数（即最接近0的正数，在64位浮点数体系中为5e-324），相应的，最接近0的负数为-Number.MIN_VALUE。")]),t._v(" "),_("p",[_("code",[t._v("Number.MAX_SAFE_INTEGER")]),t._v("：表示能够精确表示的最大整数，即9007199254740991。")]),t._v(" "),_("p",[_("code",[t._v("Number.MIN_SAFE_INTEGER")]),t._v("：表示能够精确表示的最小整数，即-9007199254740991。")]),t._v(" "),_("p",[t._v("2.Number()对象实例的方法")]),t._v(" "),_("p",[_("code",[t._v("toSting()")]),t._v("、讲数字转变成字符串形式显示 "),_("code",[t._v("8+''= 8.toString()")])]),t._v(" "),_("p",[_("code",[t._v("toFixed()")]),t._v("方法用于将一个数四舍五入转为指定位数的小数，返回这个小数对应的字符串。")]),t._v(" "),_("p",[_("code",[t._v("toExponential()")]),t._v("方法用于将一个数转为科学计数法形式。")]),t._v(" "),_("p",[_("code",[t._v("oPrecision()")]),t._v("方法用于将一个数转为指定位数的有效数字。")]),t._v(" "),_("p",[t._v("Number 实例方法的封装")]),t._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("add")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    reuslt"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("8.")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),_("p",[t._v("3.Math对象的属性")]),t._v(" "),_("p",[t._v("Math是JavaScript的内置对象，提供一系列数学常数和数学方法。该对象不是构造函数，不能生成实例，所有的属性和方法都必须在Math对象上调用。Math对象提供以下一些只读的数学常数。")]),t._v(" "),_("p",[_("code",[t._v("Math.E")]),t._v("：常数e。")]),t._v(" "),_("p",[_("code",[t._v("Math.LN2")]),t._v("：2的自然对数。")]),t._v(" "),_("p",[_("code",[t._v("Math.LN10")]),t._v("：10的自然对数。")]),t._v(" "),_("p",[_("code",[t._v("Math.LOG2E")]),t._v("：以2为底的e的对数。")]),t._v(" "),_("p",[_("code",[t._v("Math.LOG10E")]),t._v("：以10为底的e的对数。")]),t._v(" "),_("p",[_("code",[t._v("Math.PI")]),t._v("：常数Pi。")]),t._v(" "),_("p",[_("code",[t._v("Math.SQRT1_2")]),t._v("：0.5的平方根。")]),t._v(" "),_("p",[_("code",[t._v("Math.SQRT2")]),t._v("：2的平方根。")]),t._v(" "),_("p",[t._v("4.Math对象的方法")]),t._v(" "),_("p",[_("code",[t._v("Math.abs()")]),t._v("：绝对值")]),t._v(" "),_("p",[_("code",[t._v("Math.ceil()")]),t._v("：向上取整，Math.ceil方法接受一个参数，返回大于该参数的最小整数。")]),t._v(" "),_("p",[_("code",[t._v("Math.floor()")]),t._v("：向下取整，Math.floor方法接受一个参数，返回小于该参数的最大整数。")]),t._v(" "),_("p",[_("code",[t._v("Math.max()")]),t._v("：最大值")]),t._v(" "),_("p",[_("code",[t._v("Math.min()")]),t._v("：最小值")]),t._v(" "),_("p",[_("code",[t._v("Math.pow()")]),t._v("：指数运算")]),t._v(" "),_("p",[_("code",[t._v("Math.sqrt()")]),t._v("：平方根")]),t._v(" "),_("p",[_("code",[t._v("Math.log()")]),t._v("：自然对数")]),t._v(" "),_("p",[_("code",[t._v("Math.exp()")]),t._v("：e的指数")]),t._v(" "),_("p",[_("code",[t._v("Math.round()")]),t._v("：四舍五入  注意Math.round(-1.5) //-1  Math.round(0.5) // 1")]),t._v(" "),_("p",[_("code",[t._v("Math.random()")]),t._v("：随机数，Math.random()返回0到1之间的一个伪随机数，"),_("code",[t._v("可能等于0，但是一定小于1")])]),t._v(" "),_("p",[t._v("// 三角函数方法")]),t._v(" "),_("p",[_("code",[t._v("Math.sin()")]),t._v("：返回参数的正弦")]),t._v(" "),_("p",[_("code",[t._v("Math.cos()")]),t._v("：返回参数的余弦")]),t._v(" "),_("p",[_("code",[t._v("Math.tan()")]),t._v("：返回参数的正切")]),t._v(" "),_("p",[_("code",[t._v("Math.asin()")]),t._v("：返回参数的反正弦（弧度值）")]),t._v(" "),_("p",[_("code",[t._v("Math.atan()")]),t._v("：返回参数的反正切（弧度值）")]),t._v(" "),_("p",[t._v("5.String 实例对象的属性和方法")]),t._v(" "),_("p",[t._v("length属性")]),t._v(" "),_("p",[_("code",[t._v("charAt()")]),t._v("方法返回指定位置的字符，参数是从0开始编号的位置。")]),t._v(" "),_("p",[t._v("charCodeAt()")]),t._v(" "),_("p",[_("code",[t._v("concat()")]),t._v("concat方法用于连接两个字符串，返回一个新字符串，不改变原字符串。")]),t._v(" "),_("p",[_("code",[t._v("slice()")]),t._v(" slice方法用于从原字符串取出子字符串并返回，不改变原字符串，类似数组的slice方法，新字符串包括开头不包括结尾")]),t._v(" "),_("p",[_("code",[t._v("substring()")]),t._v("  优先使用slice(),两个参数分别是起始和结束位置,新字符串包括开头不包括结尾")]),t._v(" "),_("p",[_("code",[t._v("substr()")]),t._v("substr方法用于从原字符串取出子字符串并返回，不改变原字符串。substr方法的第一个参数是子字符串的开始位置，第二个参数是子字符串的长度。")]),t._v(" "),_("p",[_("code",[t._v("indexOf()")]),t._v("   indexOf方法返回给定元素在数组中第一次出现的位置，如果没有出现则返回-1,同数组")]),t._v(" "),_("p",[_("code",[t._v("lastIndexOf()")]),t._v(" lastIndexOf方法返回给定元素在数组中最后一次出现的位置，如果没有出现则返回-1，同数组")]),t._v(" "),_("p",[_("code",[t._v("trim()")]),t._v(" trim方法用于去除字符串两端的空格，返回一个新字符串，"),_("code",[t._v("不改变原字符串")]),t._v("。该方法去除的不仅是空格，还包括制表符（\\t、\\v）、换行符（\\n）和回车符（\\r）。")]),t._v(" "),_("p",[_("code",[t._v("toLowerCase()，toUpperCase()")]),t._v(" toLowerCase方法用于将一个字符串全部转为小写，toUpperCase则是全部转为大写。它们都返回一个新字符串，不改变原字符串。")]),t._v(" "),_("p",[_("code",[t._v("localeCompare()")]),t._v(" localeCompare方法用于比较两个字符串。它返回一个整数，如果小于0，表示第一个字符串小于第二个字符串；如果等于0，表示两者相等；如果大于0，表示第一个字符串大于第二个字符串。")]),t._v(" "),_("p",[_("code",[t._v("match()")]),t._v("  match方法用于确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串。如果没有找到匹配，则返回null。返回数组还有index属性和input属性，分别表示匹配字符串开始的位置和原始字符串。")]),t._v(" "),_("p",[t._v("`search() search方法的用法等同于match，但是返回值为匹配的第一个位置。如果没有找到匹配，则返回-1")]),t._v(" "),_("p",[_("code",[t._v("replace()")]),t._v("  用于替换匹配的子字符串，一般情况下只替换第一个匹配（除非使用带有g修饰符的正则表达式）")]),t._v(" "),_("p",[_("code",[t._v("split()")]),t._v("  split方法按照给定规则分割字符串，返回一个由分割出来的子字符串组成的数组。")]),t._v(" "),_("p",[_("code",[t._v("match、replace、search、split")]),t._v("参数都可以是正则表达式")])])}),[],!1,null,null,null);a.default=e.exports}}]);