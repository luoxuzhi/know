(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{551:function(t,s,a){"use strict";a.r(s);var n=a(53),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"ts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ts"}},[t._v("#")]),t._v(" ts")]),t._v(" "),a("blockquote",[a("p",[t._v("辅助工具")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.typescriptlang.org/play/",target:"_blank",rel:"noopener noreferrer"}},[t._v("在线练习"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("2.json to ts 插件")]),t._v(" "),a("li",[t._v("3."),a("a",{attrs:{href:"https://ts-ast-viewer.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("TypeScript AST Viewer"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"_1-断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-断言"}},[t._v("#")]),t._v(" 1. 断言")]),t._v(" "),a("ul",[a("li",[t._v("类型断言的两种写法：尖括号、as")])]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" someValue"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'this is a string'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("someValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" len1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("someValue "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n")])])]),a("ul",[a("li",[t._v("非空断言")])]),t._v(" "),a("p",[a("strong",[t._v("x! 将从 x 值域中排除 null 和 undefined")])]),t._v(" "),a("h3",{attrs:{id:"_2-类型保护-类型守卫"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-类型保护-类型守卫"}},[t._v("#")]),t._v(" 2. 类型保护（类型守卫）")]),t._v(" "),a("p",[a("strong",[t._v("类型保护是可执行运行时检查的一种表达式，用于确保该类型在一定的范围内")]),t._v("。 换句话说，类型保护可 以保证一个字符串是一个字符串，尽管它的值也可以是一个数值。类型保护与特性检测并不是完全不 同，其主要思想是尝试检测属性、方法或原型，以确定如何处理值。\n目前主要有以下几种的方式来实现类型保护")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("in 关键字")])]),t._v(" "),a("li",[a("p",[t._v('typeof 关键字 ：typeof v === "typename"/typeof v !== "typename" ， "typename" 必须是 number/string/boolean/symbol。 ts 并不会阻止与其它字符串比较，但是不会把那些表达式识别为类型保护。')])]),t._v(" "),a("li",[a("p",[t._v("instanceof 关键字")])]),t._v(" "),a("li",[a("p",[t._v("自定义类型保护的类型谓词")])])]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'string'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("switch")])]),t._v(" "),a("h3",{attrs:{id:"_3-交叉类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-交叉类型"}},[t._v("#")]),t._v(" 3. 交叉类型")]),t._v(" "),a("p",[t._v("在 ts 中交叉类型是将多个类型合并为一个类型。通过 & 运算符将现有的多种类型叠加到一起成为一种新的类型，它包含了所需的所有类型的特性。")]),t._v(" "),a("ul",[a("li",[t._v("同名基础类型属性的合并，对应的类型又不一致，类型会变成"),a("code",[t._v("never")])]),t._v(" "),a("li",[t._v("同名非基础类型属性的合并, 若存在相同的成员且成员类型为非基本数据类型，可以成功合并。")])]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("D")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  d"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("boolean")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("E")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  e"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("F")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  f"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("D")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("E")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("F")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ABC")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" abc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ABC")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    d"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    e"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'semlinker'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    f"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("666")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc:'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" abc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"_4-接口与类型别名的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-接口与类型别名的区别"}},[t._v("#")]),t._v(" 4. 接口与类型别名的区别")]),t._v(" "),a("ul",[a("li",[t._v("接口和类型别名都可以用来描述对象的形状或函数签名")]),t._v(" "),a("li",[t._v("与接口类型不一样，类型别名可以用于一些其他类型，比如原始类型、联合类型和元组")]),t._v(" "),a("li",[t._v("extend,接口和类型别名都能够被扩展，但语法有所不同。接口和类型别名不是互斥的。接口可以扩展类型别名，但反过来不行")]),t._v(" "),a("li",[t._v("implements，类可以以相同的方式实现接口或类型别名，但类不能实现使用类型别名定义的联合类型")]),t._v(" "),a("li",[t._v("declaration merging：与类型别名不同，同一接口可以定义多次，会被自动合并为单个接口")])]),t._v(" "),a("h3",{attrs:{id:"_5-泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-泛型"}},[t._v("#")]),t._v(" 5. 泛型")]),t._v(" "),a("p",[t._v("泛型(Generics)是允许同一个函数接受不同类型参数的一种模板。相比于使用"),a("code",[t._v("any")]),t._v("类型，使用泛型来创建可复用的组件要更好，因为泛型会保留参数类型。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("泛型函数，定义时使用泛型定义，使用时以完全省略尖括号，使编译器自动选择这些类型，从而使代码更简洁。")])]),t._v(" "),a("li",[a("p",[t._v("泛型接口")])]),t._v(" "),a("li",[a("p",[t._v("泛型类")])]),t._v(" "),a("li",[a("p",[t._v("泛型工具类型：")]),t._v(" "),a("p",[t._v("typeof 用来获取一个变量声明或对象的类型。")]),t._v(" "),a("p",[t._v("keyof 该操作符可以用于获取某种类型的所有键，其返回类型是联合类型。")]),t._v(" "),a("p",[t._v("in 用来遍历枚举类型。")]),t._v(" "),a("p",[t._v("infer")]),t._v(" "),a("p",[t._v("extends 不想过于灵活或者说想继承某些类等，可以通过 extends 关键字添加泛型约束。")]),t._v(" "),a("p",[a("code",[t._v("Partial<T>")]),t._v(" 的作用就是将某个类型里的属性全部变为可选项 "),a("code",[t._v("?")]),t._v(" 。")])])]),t._v(" "),a("p",[t._v("page 59")])])}),[],!1,null,null,null);s.default=e.exports}}]);