(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{440:function(t,s,a){"use strict";a.r(s);var n=a(53),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_8-对象的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-对象的扩展"}},[t._v("#")]),t._v(" 8.对象的扩展")]),t._v(" "),a("p",[t._v("1.ES6 允许字面量定义对象时，用表达式作为对象的属性名，即把表达式放在方括号内。")]),t._v(" "),a("p",[t._v("2."),a("code",[t._v("Object.is()")])]),t._v(" "),a("p",[t._v("ES5 比较两个值是否相等，只有两个运算符：相等运算符（"),a("code",[t._v("==")]),t._v("）和严格相等运算符（"),a("code",[t._v("===")]),t._v("）。它们都有缺点，前者会自动转换数据类型，后者的 NaN 不等于自身，以及+0 等于-0。JavaScript 缺乏一种运算，在所有环境中，只要两个值是一样的，它们就应该相等。\nES6 提出“Same-value equality”（同值相等）算法，用来解决这个问题。"),a("code",[t._v("Object.is")]),t._v("就是部署这个算法的新方法。它用来比较两个值是否严格相等，与"),a("strong",[t._v("严格比较运算符（===）的行为基本一致")]),t._v("。")]),t._v(" "),a("p",[t._v("3."),a("code",[t._v("Object.assign()")])]),t._v(" "),a("p",[a("code",[t._v("Object.assign")]),t._v("方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象,属于浅拷贝。")]),t._v(" "),a("p",[t._v("注意:"),a("strong",[t._v("如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性")]),t._v("。")]),t._v(" "),a("p",[t._v("Object.assign 方法有很多用处。\n（1）为对象添加属性\n（2）为对象添加方法")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Someclass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("methodName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("arg2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Someclass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("methodName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("arg2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("（3）合并多个对象,将多个对象合并到某个对象。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("merge")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("source")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("（4）为属性指定默认值")]),t._v(" "),a("p",[t._v("4.属性的可枚举性")]),t._v(" "),a("p",[t._v("对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。"),a("code",[t._v("Object.getOwnPropertyDescriptor")]),t._v("方法可以获取该属性的描述对象。")]),t._v(" "),a("p",[t._v("描述对象的"),a("code",[t._v("enumerable")]),t._v("属性，称为”可枚举性“，如果该属性为"),a("code",[t._v("false")]),t._v("，就表示某些操作会忽略当前属性。\n有 4 个操作会忽略"),a("code",[t._v("enumerable")]),t._v("为"),a("code",[t._v("false")]),t._v("的属性。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("for...in")]),t._v("循环：只遍历对象自身的和继承的可枚举的属性，即也会遍历原型链的 key")]),t._v(" "),a("li",[a("code",[t._v("Object.keys()")]),t._v("：返回对象自身的所有可枚举的属性的键名(用法：把要操作都对象放到"),a("code",[t._v("keys")]),t._v("的括号里面)")]),t._v(" "),a("li",[a("code",[t._v("JSON.stringify()")]),t._v("：只串行化对象自身的可枚举的属性")]),t._v(" "),a("li",[a("code",[t._v("Object.assign()")]),t._v(": 只拷贝对象自身的可枚举的属性。")])]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[a("code",[t._v("Object.create()")])])]),t._v(" "),a("p",[t._v("创建对象的原型属性")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'obj'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { a: 1, b: 2 }")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);