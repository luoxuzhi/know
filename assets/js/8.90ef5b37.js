(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{436:function(t,s,a){"use strict";a.r(s);var n=a(53),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-数值、字符串、对象、数组、函数、运算符的语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-数值、字符串、对象、数组、函数、运算符的语法"}},[t._v("#")]),t._v(" 1.数值、字符串、对象、数组、函数、运算符的语法")]),t._v(" "),a("p",[t._v("1.转义符")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\\0 null（\\u0000）\n\\b 后退键（\\u0008）\n\\f 换页符（\\u000C）\n\\n 换行符（\\u000A）\n\\r 回车键（\\u000D）\n\\t 制表符（\\u0009）\n\\v 垂直制表符（\\u000B）\n\\' 单引号（\\u0027）\n\\\" 双引号（\\u0022）\n\\ 反斜杠（\\u005C）\n")])])]),a("p",[t._v("2.对象")]),t._v(" "),a("p",[t._v("对象的所有键名都是字符串，所以加不加引号都可以对象的属性之间用逗号分隔，最后一个属性后面可以加逗号"),a("code",[t._v("trailing comma）")]),t._v("，也可以不加。不同的变量名指向同一个对象，那么它们都是这个对象的引用，也就是说"),a("code",[t._v("指向同一个内存地址")]),t._v("。这种引用只局限于对象，对于原始类型的数据则是传值引用，也就是说，都是值的拷贝。JavaScript规定，如果行首是大括号，一律解释为语句（即代码块）。如果要解释为表达式（即对象），必须在大括号前加上圆括号。读取对象的属性，有两种方法，一种是使用点运算符，还有一种是使用方括号运算符，方括号中属性名要加引号。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("otwo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("otwo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("code",[t._v("delete")]),t._v("命令用于删除对象的属性，删除成功后返回"),a("code",[t._v("true")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("xx "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])])]),a("p",[t._v("3.立即执行函数")]),t._v(" "),a("p",[t._v("JavaScript引擎规定，如果function关键字出现在行首，一律解释成语句。因此，JavaScript引擎看到行首是function关键字之后，认为这一段都是函数的定义，不应该以圆括号结尾，所以就报错了。解决方法就是不要让function出现在行首，让引擎将其理解成一个表达式。最简单的处理，就是将其放在一个圆括号里面。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" immediate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'immediately'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("code",[t._v("eval")]),t._v("命令的作用是，将字符串当作语句执行。")])])}),[],!1,null,null,null);s.default=e.exports}}]);