(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{543:function(e,n,t){"use strict";t.r(n);var a=t(53),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"_6-anime-js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-anime-js"}},[e._v("#")]),e._v(" 6. Anime.js")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/juliangarnier/anime",target:"_blank",rel:"noopener noreferrer"}},[e._v("A"),t("OutboundLink")],1),t("a",{attrs:{href:"https://github.com/juliangarnier/anime",target:"_blank",rel:"noopener noreferrer"}},[e._v("nime.js"),t("OutboundLink")],1),e._v(" 是一个强大的用来制作动画的 javascript 库，虽然功能没有 GASP（greensock）这种大型平台的功能丰富，但胜在它足够轻便，gzip 压缩完只有 6kb 左右，麻雀虽小，却五脏俱全。 相比较其它动画平台，Anime.js 具有一下一些优点：")]),e._v(" "),t("ul",[t("li",[e._v("体积小，gzip 压缩完只有 6kb 左右。")]),e._v(" "),t("li",[e._v("支持大部分的 CSS 属性动画。")]),e._v(" "),t("li",[e._v("功能强大，支持 SVG 常见的动效开发以及强大的时间轴功能。")])]),e._v(" "),t("p",[e._v("其中有一个特别重要的特性是，它对 SVG 的支持非常友好，用它来开发 SVG 动画会变得非常高效。")]),e._v(" "),t("p",[e._v("这篇教程我们就先来学习下 Anime.js 的一些基础知识，以及如何使用它来编写动画效果。 首先在 "),t("a",{attrs:{href:"https://github.com/juliangarnier/anime",target:"_blank",rel:"noopener noreferrer"}},[e._v("github"),t("OutboundLink")],1),e._v(" 下载好 Anime.js，然后在页面引入它。 下面，就来开始我们的 Anime.js 之旅。")]),e._v(" "),t("h2",{attrs:{id:"anime-js-基础知识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#anime-js-基础知识"}},[e._v("#")]),e._v(" Anime.js 基础知识")]),e._v(" "),t("p",[e._v("为了行文方便，下面以 Anime 来指代 Anime.js。 Anime 提供的 API 非常的简单，用起来非常的方便。只需要声明一个 Anime 的对象，然后在对象传入你需要运动的对象和相关的属性就可以使元素动起来。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const animeObject = anime({\n  /* 需要运动的相关属性 */\n});\n\n")])])]),t("p",[e._v("下面我们使用一个简单的实例来讲解下 Anime 的语法知识：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/12/8/1678c9ff177ecc76?w=512&h=276&f=gif&s=62626",alt:"图片"}})]),e._v(" "),t("p",[e._v("先准备基本的 HTML 和 CSS： HTML：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<div class="box"></div>\n\n')])])]),t("p",[e._v("CSS：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(".box {\n  width:100px;\n  height: 100px;\n  margin-top: 100px;\n  background-color: rgb(251, 21, 90);\n}\n\n")])])]),t("p",[e._v("然后是使用 Anime 来实现这个移动动画效果，代码非常简单：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("anime({\n  targets: '.box',\n  translateX: 300,\n  duration: 800,\n  delay: 600,\n  easing: 'easeInOutSine',\n  loop: true\n});\n\n")])])]),t("p",[t("a",{attrs:{href:"https://codepen.io/janily/pen/aPojEm",target:"_blank",rel:"noopener noreferrer"}},[e._v("代码演示地址"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("简单的几行代码就可以实现这个元素移动的动画效果，下面我们就用上面的这个代码来学习下 Anime 的基本语法知识，在 Anime 的对象中，我们可以操作和定义元素动画相关的属性：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{\n  /* 需要运动的元素，它可以是 div 或者是 CSS 类名 ID名 .box #box，也可以是SVG元素 */\n  /* 操作指定元素的相关属性，比如宽、高、透明度、颜色，位置等属性 */\n  /* 定义动画的时间，延迟时间以及运动曲线等 */\n  /* 指定元素的动画是否循环播放或者自动播放等属性 */\n}\n\n")])])]),t("p",[e._v("具体到我们上面的这个实例：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("anime({\n  targets: '.box',\n  translateX: 300,\n  duration: 800,\n  delay: 600,\n  easing: 'easeInOutSine',\n  loop: true\n});\n\n")])])]),t("ul",[t("li",[e._v("targets：表示需要运动的元素，可以是 CSS 类和 ID 来指定。")]),e._v(" "),t("li",[e._v("translateX：指定需要运动的属性，我们这里指定的是元素的 transform 这个位移属性，除此之外，我们还可以指定元素的其它 CSS 属性，比如宽和高等。")]),e._v(" "),t("li",[e._v("动画相关属性，比如动画的执行时间（duration）、延迟执行时间（delay）、动画的运动曲线（easing）和动画是否循环执行（loop）等。")]),e._v(" "),t("li",[e._v("loop 默认值是 false，当为 true 的时候，表示动画不断的循环执行。")])]),e._v(" "),t("p",[e._v("在上面代码中 target 我们使用 CSS 中的类选择器，除此之外，我们还可以使用下面这几种方法来选择元素：")]),e._v(" "),t("ul",[t("li",[e._v("DOM 选择方法 document.querySelector('.box') 或者是 document.querySelectorAll('.box') 方法;")]),e._v(" "),t("li",[e._v("js 数组的方法 ['box']；")]),e._v(" "),t("li",[e._v("js 对象的方式 {elementNmae:'box'}")])]),e._v(" "),t("p",[e._v("如果需要操作多个元素，还可以这样做：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var animeaBox = anime({\n  targets: ['.box', '.circle'],\n});\n\n")])])]),t("p",[e._v("在上面代码中，第二个属性是 translateY，也就是要操作元素做出变化的属性，和 CSS 中操作元素的方法非常相似。作为一个经常和动画打交道的前端开发人员，对于使用 transform 属性来提高动画的性能想必是非常清楚的，同样在使用 animejs 来编写动画效果的时候，特别涉及操作元素位置的时候也建议使用 transform 等属性来操作来提高动画性能。")]),e._v(" "),t("p",[e._v("当然，对于任何属性的值，也可以使用特定的函数来随机分配它们的值，比如像下面这样的：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("translateX: (elm, index, t) => index * 2\n\n")])])]),t("p",[e._v("在多个元素运动的时候就特别管用。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("easing: 'easeInOutSine'\n\n")])])]),t("p",[e._v("easing，它是用来定义动画运行速度曲线的，与 CSS3 中的动画曲线一样。")]),e._v(" "),t("p",[e._v("我们可以使用下面的方法来查看 Anime 中有哪些运动曲线：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("console.log(anime.easings);\n\n")])])]),t("h2",{attrs:{id:"运动多个元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运动多个元素"}},[e._v("#")]),e._v(" 运动多个元素")]),e._v(" "),t("p",[e._v("我们来实现下面这个多个元素的移动动画效果：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/12/8/1678c9ff6c89c875?w=455&h=206&f=gif&s=122085",alt:"图片"}})]),e._v(" "),t("p",[e._v("先来看下代码：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("anime({\n  targets: '.box',\n  translateX: (elm, index, t) => index * 150,\n  duration: 1200,\n  delay: (elm, index, t) => index * 20,\n  easing: 'easeInOutSine',\n  loop: true,\n  direction: 'alternate',\n});\n\n")])])]),t("p",[e._v("代码是非常的简单明了，对代码做个简单的说明：")]),e._v(" "),t("ul",[t("li",[e._v("我们需要运动的元素全部是类名为 box 的元素。")]),e._v(" "),t("li",[e._v("使用了 transform 中的 translateX 属性来移动元素。")]),e._v(" "),t("li",[e._v("其中 translateX 的值使用一个方法来计算，每个元素的值都依赖它们的索引值。")]),e._v(" "),t("li",[e._v("上面的代码中还用到来 direction 这个属性，它的值又 "),t("strong",[e._v("normal")]),e._v(" 和 "),t("strong",[e._v("reverse")]),e._v("，当值为 reverse 的时候，表示动画回来回的执行，就像我们上面的这个效果一样，direction 的值为 "),t("strong",[e._v("reverse")]),e._v("。所以元素在移动到目标位置的时候，会往回运动到元素的初始位置，如此不断的反复。")])]),e._v(" "),t("p",[e._v("除了多个元素的控制，也可以同时针对一个元素的某一个属性，来进行多个值的控制，比如上面动画中我们可以不停的改变元素的背景颜色：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/12/8/1678c9ff39b2601e?w=455&h=206&f=gif&s=112913",alt:"图片"}})]),e._v(" "),t("p",[e._v("代码也非常的简单：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("anime({\n  targets: '.box',\n  translateX: (elm, index, t) => index * 150,\n  backgroundColor: [\n    {value: '#000'}, // Or #FFFFFF\n    {value: 'rgb(255, 0, 0)'},\n    {value: 'hsl(100, 60%, 60%)'}\n  ],\n  duration: 1200,\n  delay: (elm, index, t) => index * 20,\n  easing: 'easeInOutSine',\n  loop: true,\n  direction: 'alternate',\n});\n\n")])])]),t("p",[e._v("在上面的代码中，我们通过 "),t("strong",[e._v("backgroundColor")]),e._v(" 这个属性来改变元素的背景颜色，不同的是这里我们通过一个数组赋予它一组颜色的值，Anime 会自动的在这几个值中来回的填充元素的背景颜色。")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://codepen.io/janily/pen/JwPaaa",target:"_blank",rel:"noopener noreferrer"}},[e._v("代码演示地址"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"动画控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动画控制"}},[e._v("#")]),e._v(" 动画控制")]),e._v(" "),t("p",[e._v("Anime 还提供来注入 "),t("strong",[e._v("play、pause")]),e._v(" 和 "),t("strong",[e._v("restart")]),e._v(" 方法来控制动画的执行、暂停和重新开始运行动画。也可以使用 "),t("strong",[e._v("seek")]),e._v(" 方法来执行跳帧动画。")]),e._v(" "),t("p",[e._v("下面仍然通过上面的动画效果来实际体验下动画的控制。")]),e._v(" "),t("p",[e._v("我们先改造下代码：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var movingBox = anime({\n  targets: '.box',\n  translateX: (elm, index, t) => index * 150,\n  backgroundColor: [\n    {value: '#000'}, // Or #FFFFFF\n    {value: 'rgb(255, 0, 0)'},\n    {value: 'hsl(100, 60%, 60%)'}\n  ],\n  duration: 1200,\n  delay: (elm, index, t) => index * 20,\n  easing: 'easeInOutSine',\n  loop: true,\n  direction: 'alternate',\n});\n\nvar pauseBtn = document.getElementById(\"pause\");\nvar playBtn = document.getElementById(\"play\");\nvar restartBtn = document.getElementById(\"restart\");\n\npauseBtn.addEventListener('click', function(e) {\n  e.preventDefault();\n  movingBox.pause();\n});\n\nplayBtn.addEventListener('click', function(e) {\n  e.preventDefault();\n  movingBox.play();\n});\n\nrestartBtn.addEventListener('click', function(e) {\n  e.preventDefault();\n  movingBox.restart();\n});\n\n")])])]),t("p",[e._v("在上面代码中我们定义来 3 个按钮，分别表示动画的播放、暂停和重新开始，给 3 个按钮绑定 Anime 提供的 "),t("strong",[e._v("pause、play")]),e._v(" 和 "),t("strong",[e._v("restart")]),e._v(" 方法来控制动画，如下图所示：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/12/8/1678c9ffa4ed9419?w=455&h=206&f=gif&s=234231",alt:"图片"}})]),e._v(" "),t("p",[e._v("通过这几个方法，我们可以轻松的对动画的播放、暂停等进行控制。")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://codepen.io/janily/pen/pqzxod",target:"_blank",rel:"noopener noreferrer"}},[e._v("代码演示地址"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("这里有点需要注意的是：为了在页面加载完的时候，不运行动画，需要设置 autoplay 的值为 false。")]),e._v(" "),t("h2",{attrs:{id:"时间轴"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#时间轴"}},[e._v("#")]),e._v(" 时间轴")]),e._v(" "),t("p",[e._v("如果大家有接触过 GreenSock 这个动画库的话，相信你对它提供的时间轴的功能一定印象深刻。Anime 虽然很轻量，但它也提供来时间轴的功能。")]),e._v(" "),t("p",[e._v("时间轴是用来控制动画执行的先后顺序的。一般我们做动画的时候，默认情况下，动画是同时执行的。如果要按顺序执行，则要设置动画延时来达到目的。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/12/8/1678c9ff6c89c875?w=455&h=206&f=gif&s=122085",alt:"图片"}})]),e._v(" "),t("p",[e._v("比如我们上面实现的这个动画，如果，我们把它们运动的值设置为一样，那它们会同时执行动画效果，如下图所示：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/12/8/1678c9ff65c69014?w=455&h=206&f=gif&s=143961",alt:"图片"}})]),e._v(" "),t("p",[e._v("那如果我们想要这 3 个元素按顺序来执行动画，该怎么办呢？这个时候就可以借助 Anime 强大的时间轴功能来实现这个按顺序执行的动画效果。")]),e._v(" "),t("p",[e._v("在 Anime 中，定义一个时间轴也非常简单：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var basicTimeline = anime.timeline();\n\n")])])]),t("p",[e._v("一行代码足矣。")]),e._v(" "),t("p",[e._v("下面使用上面定义的这个时间轴来实现按顺序执行的动画效果。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var basicTimeline = anime.timeline({\n  duration: 1200,\n  easing: 'easeOutExpo',\n  loop: true\n});\n\nbasicTimeline\n  .add({\n    targets: '.box1',\n    translateX: 750,\n  })\n  .add({\n    targets: '.box2',\n    translateX: 550,\n  })\n  .add({\n    targets: '.box3',\n    translateX: 350,\n  });\n\n")])])]),t("p",[e._v("在上面的代码中，我们首先使用 Anime 提供的 "),t("strong",[e._v("anime.timeline")]),e._v(" 方法定义了一个 "),t("strong",[e._v("basicTimeline")]),e._v(" 的时间轴，然后在时间轴定义了整个动画的一些公共属性，比如动画的执行时间，动画是否循环执行等。")]),e._v(" "),t("p",[e._v("然后在时间轴使用 "),t("strong",[e._v(".add")]),e._v(" 的方式来添加动画效果，这样定义的动画它会按顺序来执行，第一个动画执行完，接着执行第二个动画效果，而不是同时执行。如下图所示：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/12/8/1678caab47203271?w=836&h=206&f=gif&s=75855",alt:""}})]),e._v(" "),t("p",[t("a",{attrs:{href:"https://codepen.io/janily/pen/roBqmQ",target:"_blank",rel:"noopener noreferrer"}},[e._v("代码演示地址"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Anime 的基本知识就介绍到这里，更多它的使用方法，可以去"),t("a",{attrs:{href:"http://animejs.com/documentation/",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方文档"),t("OutboundLink")],1),e._v("详细查看。从下一节开始，我们来学习使用 Anime 来高效的开发 SVG 动画。")])])}),[],!1,null,null,null);n.default=r.exports}}]);